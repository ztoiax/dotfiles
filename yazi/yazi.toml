# 默认的yazi.toml https://github.com/sxyazi/yazi/blob/main/yazi-config/preset/yazi-default.toml

[manager]
# 父级宽度为1/8，当前宽度为3/8，预览宽度为4/8
ratio          = [ 1, 4, 3 ]
# 默认按字母排序
sort_by        = "alphabetical"
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false
linemode = "size"
show_hidden = true
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi: {cwd}"

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""
image_delay     = 30
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
# orphan：即使Yazi已经退出，也保持进程运行，一旦指定，进程将从任务调度系统中分离。


# 以阻塞方式打开。设置后，yazi将隐藏到一个副屏幕，并显示在主屏幕上的程序，直到它退出。在此期间，它可以接收I/O信号，这对交互式程序很有用。
edit = [
  { run = '$EDITOR "$@"', block = true, desc = "new nvim", for = "unix" },
  { run = 'nvim --server /tmp/nvim.socket --remote "$@"', block = true, desc = "current nvim", for = "unix" },
  { run = 'code "$@"', orphan = true, desc = "vscode", for = "unix" },
  { run = 'zeditor "$@"', orphan = true, desc = "zeditor", for = "unix" },
  { run = 'helix "$@"', orphan = true, desc = "helix", for = "unix" },
]
open = [
  { run = 'xdg-open "$1"', desc = "Open", for = "linux" },
  { run = 'open "$@"', desc = "Open", for = "macos" },
  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
	{ run = 'termux-open "$1"',             desc = "Open", for = "android" },
  { run = 'nvim --server /tmp/nvim.socket --remote "$@"', block = true, desc = "current nvim", for = "unix" },
  { run = '$EDITOR "$@"', block = true, desc = "new nvim", for = "unix" },
]
reveal = [
  { run = 'xdg-open "$(dirname "$1")"', desc = "Reveal", for = "linux" },
  { run = 'open -R "$1"', desc = "Reveal", for = "macos" },
  { run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
  { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
open_image = [
  { run = 'swayimg --fullscreen "$@"', orphan = true, desc = "swayimg" },
  { run = 'nomacs --fullscreen "$@"', orphan = true, desc = "nomacs" },
  { run = 'qimgv "$@"', orphan = true, desc = "qimgv" },
]
extract = [
  { run = 'engrampa "$@"', orphan = true, desc = "open with engrampa", for = "unix" },
  { run = 'ya pub extract --list "$@"', desc = "Extract here with ya pub extract", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
  { run = 'ouch d -y "$@"', desc = "Extract here with ouch", for = "unix" },
  { run = 'myx.sh "$@"', desc = "Extract here with myx.sh", for = "unix" },
]
pdf = [
  { run = 'zathura --mode fullscreen "$@"', orphan = true, desc = "zathura" },
  { run = 'sioyek "$@"', orphan = true, desc = "sioyek" },
  { run = 'readest "$@"', orphan = true, desc = "readest" },
  { run = 'foliate "$@"', orphan = true, desc = "foliate" },
]

play = [

	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --force-window %*', orphan = true, for = "windows" },
  { run = 'vlc --fullscreen "$@"', orphan = true, desc = "vlc", for = "unix" },
  { run = 'xdg-open "$@"', orphan = true, desc = "Open with web" },
  { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	# Folder
	{ name = "*/", use = [ "edit", "open", "reveal" ] },
	# Text
	{ mime = "text/*", use = [ "edit", "reveal" ] },
	# Image
	{ mime = "image/*", use = [ "open", "reveal" ] },
	# Media
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },
	# Archive
	# { mime = "application/{zst,zstd,zip,rar,7z*,tar,gzip,gz,xz,bz,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] },
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,octet-stream,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = [ "extract", "reveal" ] },
	# JSON
	{ mime = "application/{json,ndjson}", use = [ "edit"  ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },
	# pdf、epub、mobi
	{ mime = "application/{pdf,epub+zip,x-mobipocket-ebook}", use = "pdf" },
	# Empty file
	{ mime = "inode/empty", use = [ "edit", "reveal" ] },
	# Fallback
	{ name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 10
bizarre_retry    = 3
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

prepend_rules = []
# 始终优先于默认的优先级规则。
append_rules = []

[plugin]
# https://yazi-rs.github.io/docs/resources/
# https://github.com/AnirudhG07/awesome-yazi

append_previewers = [
  # binary二进制文件
  # { mime = "*", run = "readelf" },
]

prepend_previewers = [
]

prepend_preloaders = [
]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", prio = "high" },
]
spotters = [
	{ name = "*/", run = "folder" },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# Fallback
	{ name = "*", run = "file" },
]
preloaders = [
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/{pdf,epub+zip,x-mobipocket-ebook}", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
]

previewers = [
	{ mime = "text/*",                 run = "bat" },
	{ mime = "*/xml",                  run = "bat" },
	{ mime = "*/cs",                   run = "bat" },
	{ mime = "*/javascript",           run = "bat" },
	{ mime = "*/x-wine-extension-ini", run = "bat" },
	{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "bat" },
	{ mime = "application/{json,ndjson}", run = "bat" },
	# Image
	{ mime = "image/{avif,hei?,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
  # PDF
	{ mime = "application/{pdf,epub+zip,x-mobipocket-ebook}", run = "pdf" },
	# Archive
	{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
	{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
	{ name = "*.{AppImage,appimage}", run = "archive" },
	# Virtual Disk / Disk Image
	{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
	{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
	{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/ms-opentype", run = "font" },
	# Empty file
	{ mime = "inode/empty", run = "empty" },

  { name = "*/", run = "eza-preview" },
  { name = "*.csv", run = "bat" }, # for csv files
  # { name = "*.md", run = "glow" },  # for markdown (.md) files
  { name = "*.md", run = "bat" },
  { name = "*.rst", run = "rich-preview" },       # for restructured text (.rst) files
  { name = "*.ipynb", run = "rich-preview" },     # for jupyter notebooks (.ipynb)
  { name = "*.json", run = "bat" },      # for json (.json) files
  { name = "*.lang_type", run = "rich-preview" }, # for particular language files eg. .py, .go., .lua, etc.

  { mime = "audio/*", run = "exifaudio" },
  # { mime = "video/*", run = "video-ffmpeg" },
  { mime = "application/x-bittorrent", run = "torrent-preview" },
	# file
	{ name = "*", run = "bat" },
]

[[plugin.prepend_fetchers]]
id = "git"
name = "*"
run = "git"

[[plugin.prepend_fetchers]]
id = "git"
name = "*/"
run = "git"

[[plugin.prepend_fetchers]]
id   = "mime"
if   = "!mime"
name = "*"
run  = "mime-ext"
prio = "high"

[input]
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

[confirm]
# trash
trash_title 	= "Trash {n} selected file{s}?"
trash_origin	= "center"
trash_offset	= [ 0, 0, 70, 20 ]

# delete
delete_title 	= "Permanently delete {n} selected file{s}?"
delete_origin	= "center"
delete_offset	= [ 0, 0, 70, 20 ]

# overwrite
overwrite_title   = "Overwrite file?"
overwrite_content = "Will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 50, 15 ]

# quit
quit_title   = "Quit?"
quit_content = "The following tasks are still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 50, 15 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false
